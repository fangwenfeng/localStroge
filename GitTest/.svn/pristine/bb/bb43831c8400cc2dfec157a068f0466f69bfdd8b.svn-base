<!DOCTYPE HTML>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="maximum-scale=1.0, minimum-scale=1.0, user-scalable=0, initial-scale=1.0, width=device-width"/>
    <meta name="format-detection" content="telephone=no, email=no, date=no, address=no">
    <title>Hello APP</title>
    <link rel="stylesheet" type="text/css" href="../css/api.css" />
    <style>
      html,body{
        height: 100%;
    }
    #wrap{
        height: 100%;
        display: -webkit-box;
        display: -webkit-flex;
        display: flex;
        -webkit-box-orient: vertical;
        -webkit-flex-flow: column;
        flex-flow: column;
    }
    #header{
        text-align: center; background-color: #81a9c3; color: #fff;
        width: 100%;height: 30px;
    }

    #main{
        -webkit-box-flex: 1; 
        -webkit-flex: 1;
        flex: 1;
    }
    #footer{
        height: 30px; line-height: 30px;
        background-color: #81a9c3; 
        width: 100%;
        text-align: center;
        position: absolute;
        bottom: 0;
    }
    #footer h5{
        color: white;
    }
    .divCss{
        height: 50px;
        line-height: 50px;
        color: #000;
        font-size:16px;
        text-align: center;
        border-bottom: 1px solid #444;
    }
    span {
        margin: 3px 5px;
        display: inline-block;
    }
    button {padding: 8px; margin: 5px; }
    button::after { content: '-' attr( data-name) '( )';}
</style>
</head>
<body>           
    <div class="divCss">
        <span tapmode onclick="coverFlow_test()">3D图片流效果</span>
        <span tapmode onclick="coverFlowClose()">关闭</span>
    </div>
    <div class="divCss">
        聊天输入框模块
    </div>
    <button tapmode onclick="fnOpen( this )" data-name="open"></button>
    <button tapmode onclick="fnClose( this )" data-name="close"></button>
    <button tapmode onclick="fnPopupKeyboard( this )" data-name="popupKeyboard"></button>
    <button tapmode onclick="fnCloseKeyboard( this )" data-name="closeKeyboard"></button>
    <button tapmode onclick="fnPopupBoard( this )" data-name="popupBoard"></button>
    <button tapmode onclick="fnCloseBoard( this )" data-name="closeBoard"></button>
    <button tapmode onclick="fnValue( this )" data-name="value">设置</button>
    <button tapmode onclick="fnValue( this )" data-name="value">获取</button>
    <button tapmode onclick="fnInsertValue( this )" data-name="insertValue"></button>
    <button tapmode onclick="fnAddEventListener( this )" data-name="addEventListener">监听 recordBtn 按钮</button>
    <button tapmode onclick="fnAddEventListener( this )" data-name="addEventListener">监听 inputBar</button>
    <button tapmode onclick="fnSetPlaceholder( this )" data-name="setPlaceholder"></button>
    <button tapmode onclick="fnReloadExtraBoard( this )" data-name="reloadExtraBoard"></button>
    
</body>
<script type="text/javascript" src="../script/api.js"></script>
<script type="text/javascript">
    var UICoverFlow;
    var UIChatBox;
    apiready = function(){
        UICoverFlow = api.require('UICoverFlow');
        UIChatBox = api.require('UIChatBox');
        api.setStatusBarStyle({
            color: '#2390ce'
        });
    }
    
    function fnOpen( el ){
        UIChatBox.open({
            placeholder: '输入发送内容',
            autoFocus: true,
            emotionPath: 'widget://image/emotion',
            styles: {
                extrasBtn: {
                    normalImg: 'widget://image/add1.png'
                },
                speechBtn: {
                    normalImg: 'widget://image/cam1.png'
                },
                indicator: {  //表情和附加功能面板的小圆点指示器样式
                    target: 'extrasPanel',
                    color: '#c4c4c4',
                    activeColor: '#9e9e9e'
                },
                sendBtn: {
                    titleColor: '#4cc518',
                    bg: '#999999' ,
                    activeBg: '#46a91e',
                    titleSize: 14
                }
            },
            extras: {
                titleSize: 10,
                titleColor: '#a3a3a3',
                btns: [{
                    title: '图片',
                    normalImg: 'widget://image/album1.png',
                    activeImg: 'widget://image/album2.png'
                },{
                    title: '发送地址',
                    normalImg: 'widget://image/loc1.png',
                    activeImg: 'widget://image/loc2.png'
                },{
                    title: '图片',
                    normalImg: 'widget://image/album1.png',
                    activeImg: 'widget://image/album2.png'
                },{
                    title: '发送地址',
                    normalImg: 'widget://image/loc1.png',
                    activeImg: 'widget://image/loc2.png'
                }]
            }
        }, function( ret, err ){
            if( ret ){
                alert( JSON.stringify( ret ) );
            }else{
                alert( JSON.stringify( err ) );
            }
        });
    }
    function fnClose( el ){
        UIChatBox.close();
    }    
    function fnPopupBoard( el){
        UIChatBox.popupBoard({
            target:'extras'
        });
    }    
    function fnPopupKeyboard( el){
        UIChatBox.popupKeyboard();
    }    
    function fnCloseKeyboard( el){
        UIChatBox.closeKeyboard();
    }    
    function fnCloseBoard( el){
        UIChatBox.closeBoard();
    }    
    function fnValue( el){
        if( el.innerHTML === '设置' ){
            UIChatBox.value({
                msg: '使用 value 设置新值'
            });
        }else{
            UIChatBox.value(function(ret, err){
                if( ret ){
                    alert( JSON.stringify( ret ) );
                }else{
                    alert( JSON.stringify( err ) );
                }
            });
        }
    }    
    function fnInsertValue( el){
        UIChatBox.insertValue({
            msg: '使用 insertValue 插入的新值'
        });
    }     
    function fnAddEventListener( el){
        if( el.innerHTML === '监听 recordBtn 按钮' ){
            UIChatBox.addEventListener({
                target: 'recordBtn',
                name: 'press'
            }, function( ret, err ){
                if( ret ){
                    alert( JSON.stringify( ret ) );
                }else{
                    alert( JSON.stringify( err ) );
                }
            });
        }else{
           UIChatBox.addEventListener({
                target: 'inputBar',
                name: 'move'
            }, function( ret, err ){
                if( ret ){
                    alert( JSON.stringify( ret ) );
                }else{
                    alert( JSON.stringify( err ) );
                }
            });
        }
    }    
    function fnSetPlaceholder( el){
        UIChatBox.setPlaceholder({
            placeholder: '修改了占位提示内容'
        });
    }    
    function fnReloadExtraBoard( el){
        UIChatBox.reloadExtraBoard({
            extras: {
                btns: [{
                    title: '发送地址',
                    normalImg: 'widget://image/loc1.png',
                    activeImg: 'widget://image/loc2.png'
                },{
                    title: '发送地址',
                    normalImg: 'widget://image/loc1.png',
                    activeImg: 'widget://image/loc2.png'
                }]
            }
        });
    }
    
    function coverFlow_test(){
        UICoverFlow.open({
            rect: {
                x: 0,
                y: 60,
                w: api.winWidth,
                h: 480
            },
            styles: {
                bg: '#fff',
                image: {
                    activeW: 300,
                    activeH: 400,
                    corner: 2,
                    placeholder: 'widget:/image/girl1.jpg'
                }

            },
            images: [{
                url: 'widget:/image/girl.jpg'
            }, {
                url: 'widget:/image/girl1.jpg'
            }, {
                url: 'widget:/image/girl.jpg'
            }, {
                url: 'widget:/image/girl1.jpg'
            }],
            index: 0,
            interval: 2000,
            fixedOn: api.frameName,
            fixed: false
        }, function(ret, err) {
            if (ret) {
                // alert(JSON.stringify(ret));
            } else {
                alert(JSON.stringify(err));
            }
        });
    }
    function coverFlowClose(){
        UICoverFlow.close();
    }
        
</script>
</html>